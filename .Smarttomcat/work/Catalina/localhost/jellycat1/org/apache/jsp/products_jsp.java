/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/10.1.41
 * Generated at: 2025-05-27 02:09:19 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp;

import jakarta.servlet.*;
import jakarta.servlet.http.*;
import jakarta.servlet.jsp.*;
import java.util.List;
import Beans.Products;

public final class products_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent,
                 org.apache.jasper.runtime.JspSourceImports,
                 org.apache.jasper.runtime.JspSourceDirectives {

  private static final jakarta.servlet.jsp.JspFactory _jspxFactory =
          jakarta.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  private static final java.util.Set<java.lang.String> _jspx_imports_packages;

  private static final java.util.Set<java.lang.String> _jspx_imports_classes;

  static {
    _jspx_imports_packages = new java.util.LinkedHashSet<>(4);
    _jspx_imports_packages.add("jakarta.servlet");
    _jspx_imports_packages.add("jakarta.servlet.http");
    _jspx_imports_packages.add("jakarta.servlet.jsp");
    _jspx_imports_classes = new java.util.LinkedHashSet<>(3);
    _jspx_imports_classes.add("java.util.List");
    _jspx_imports_classes.add("Beans.Products");
  }

  private volatile jakarta.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public java.util.Set<java.lang.String> getPackageImports() {
    return _jspx_imports_packages;
  }

  public java.util.Set<java.lang.String> getClassImports() {
    return _jspx_imports_classes;
  }

  public boolean getErrorOnELNotFound() {
    return false;
  }

  public jakarta.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
  }

  public void _jspDestroy() {
  }

  public void _jspService(final jakarta.servlet.http.HttpServletRequest request, final jakarta.servlet.http.HttpServletResponse response)
      throws java.io.IOException, jakarta.servlet.ServletException {

    if (!jakarta.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) {
      final java.lang.String _jspx_method = request.getMethod();
      if ("OPTIONS".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        return;
      }
      if (!"GET".equals(_jspx_method) && !"POST".equals(_jspx_method) && !"HEAD".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, "JSPs only permit GET, POST or HEAD. Jasper also permits OPTIONS");
        return;
      }
    }

    final jakarta.servlet.jsp.PageContext pageContext;
    jakarta.servlet.http.HttpSession session = null;
    final jakarta.servlet.ServletContext application;
    final jakarta.servlet.ServletConfig config;
    jakarta.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    jakarta.servlet.jsp.JspWriter _jspx_out = null;
    jakarta.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html;charset=UTF-8");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("<!DOCTYPE html>\r\n");
      out.write("<html lang=\"en\">\r\n");
      out.write("<head>\r\n");
      out.write("  <meta charset=\"utf-8\"/>\r\n");
      out.write("  <meta content=\"width=device-width, initial-scale=1.0\" name=\"viewport\"/>\r\n");
      out.write("  <title>Products by Category</title>\r\n");
      out.write("  <script src=\"https://cdn.tailwindcss.com\"></script>\r\n");
      out.write("  <link href=\"https://cdnjs.cloudflare.com/ajax/libs/font-awesome/5.15.3/css/all.min.css\" rel=\"stylesheet\"/>\r\n");
      out.write("  <link href=\"https://fonts.googleapis.com/css2?family=Roboto:wght@400;700&display=swap\" rel=\"stylesheet\"/>\r\n");
      out.write("</head>\r\n");
      out.write("<body class=\"font-roboto bg-gray-100\">\r\n");
      out.write("  <!-- Header Section -->\r\n");
      out.write("  <header class=\"bg-white shadow-lg\">\r\n");
      out.write("    <div class=\"container mx-auto flex justify-between items-center py-4 px-6\">\r\n");
      out.write("      <div class=\"logo flex items-center\">\r\n");
      out.write("        <img alt=\"Jellycat logo\" class=\"mr-4\" height=\"50\" src=\"https://storage.googleapis.com/a1aa/image/FQHw3eMxpk2eakMv3O1MJ3DrSguzwJk8FAGfLnYFr6mlCFlnA.jpg\" width=\"50\">\r\n");
      out.write("        <span class=\"text-2xl font-bold text-blue-500\">JELLYCAT</span>\r\n");
      out.write("      </div>\r\n");
      out.write("      <div class=\"flex items-center space-x-6\">\r\n");
      out.write("        <!-- Home link -->\r\n");
      out.write("        <a href=\"ProductList\" class=\"text-gray-600 hover:text-blue-500\">Trang chủ</a>\r\n");
      out.write("      </div>\r\n");
      out.write("    </div>\r\n");
      out.write("  </header>\r\n");
      out.write("\r\n");
      out.write("  <!-- Main Content: Product List -->\r\n");
      out.write("  <main class=\"container mx-auto px-4 py-6\">\r\n");
      out.write("    <h2 class=\"text-2xl font-bold text-gray-800 mb-4\">Sản phẩm theo danh mục bạn chọn</h2>\r\n");
      out.write("\r\n");
      out.write("    <!-- Product Grid -->\r\n");
      out.write("    <div class=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4\">\r\n");
      out.write("      ");

        List<Products> productList = (List<Products>) request.getAttribute("productList");
        if (productList != null && !productList.isEmpty()) {
          for (Products product : productList) {
      
      out.write("\r\n");
      out.write("        <div class=\"product-card p-4 bg-white rounded shadow-md relative group\">\r\n");
      out.write("          <!-- Product Image and Name (Clickable) -->\r\n");
      out.write("          <button onclick=\"window.location.href='productDetail.jsp?productId=");
      out.print( product.getProductId() );
      out.write("'\" class=\"w-full text-left\">\r\n");
      out.write("            <img class=\"w-full h-64 object-cover rounded\"\r\n");
      out.write("                 src=\"data:image/jpeg;base64,");
      out.print( java.util.Base64.getEncoder().encodeToString(product.getImage()) );
      out.write("\"\r\n");
      out.write("                 alt=\"");
      out.print( product.getName() );
      out.write("\" />\r\n");
      out.write("            <h3 class=\"text-lg font-bold text-center my-2\">");
      out.print( product.getName() );
      out.write("</h3>\r\n");
      out.write("          </button>\r\n");
      out.write("          <p class=\"text-gray-600 text-sm mb-2\">");
      out.print( product.getDescription() );
      out.write("</p>\r\n");
      out.write("          <div class=\"flex justify-between items-center mb-4\">\r\n");
      out.write("            <p class=\"text-green-600 font-semibold\">Price: ");
      out.print( product.getPrice() );
      out.write(" VND</p>\r\n");
      out.write("            <p class=\"text-gray-500\">Stock: ");
      out.print( product.getStock() );
      out.write("</p>\r\n");
      out.write("          </div>\r\n");
      out.write("          <!-- Add to Cart Form -->\r\n");
      out.write("          <form method=\"post\" action=\"CartServlet\">\r\n");
      out.write("            <input type=\"hidden\" name=\"action\" value=\"add\"/>\r\n");
      out.write("            <input type=\"hidden\" name=\"userId\" value=\"");
      out.print( session.getAttribute("userId") );
      out.write("\" />\r\n");
      out.write("            <input type=\"hidden\" name=\"productId\" value=\"");
      out.print( product.getProductId() );
      out.write("\" />\r\n");
      out.write("            <input type=\"hidden\" name=\"productName\" value=\"");
      out.print( product.getName() );
      out.write("\">\r\n");
      out.write("            <input type=\"hidden\" name=\"price\" value=\"");
      out.print( product.getPrice() );
      out.write("\">\r\n");
      out.write("            <input type=\"hidden\" name=\"productImage\" value=\"");
      out.print( java.util.Base64.getEncoder().encodeToString(product.getImage()) );
      out.write("\">\r\n");
      out.write("            <input type=\"hidden\" name=\"quantity\" value=\"1\" />\r\n");
      out.write("            <input type=\"hidden\" name=\"csrfToken\" value=\"");
      out.print( session.getAttribute("csrfToken") );
      out.write("\"/>\r\n");
      out.write("            <button type=\"submit\"\r\n");
      out.write("                    class=\"w-full bg-blue-600 text-white py-2 rounded hover:bg-blue-700 focus:ring-2 focus:ring-blue-500\r\n");
      out.write("                           absolute bottom-4 left-4 right-4 opacity-0 group-hover:opacity-100 transition-opacity\">\r\n");
      out.write("              Thêm vào giỏ hàng\r\n");
      out.write("            </button>\r\n");
      out.write("          </form>\r\n");
      out.write("        </div>\r\n");
      out.write("      ");

          }
        } else {
      
      out.write("\r\n");
      out.write("        <p>Danh mục hiện tại chưa có sản phẩm.</p>\r\n");
      out.write("      ");

        }
      
      out.write("\r\n");
      out.write("    </div>\r\n");
      out.write("  </main>\r\n");
      out.write("\r\n");
      out.write("  <!-- Footer Section -->\r\n");
      out.write("  <footer class=\"bg-blue-500 text-white py-4\">\r\n");
      out.write("    <div class=\"container mx-auto text-center\">\r\n");
      out.write("      <p>© 2024 Jellycat. All rights reserved.</p>\r\n");
      out.write("    </div>\r\n");
      out.write("  </footer>\r\n");
      out.write("</body>\r\n");
      out.write("</html>");
    } catch (java.lang.Throwable t) {
      if (!(t instanceof jakarta.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
