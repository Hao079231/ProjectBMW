/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/10.1.10
 * Generated at: 2025-05-22 15:28:47 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp;

import jakarta.servlet.*;
import jakarta.servlet.http.*;
import jakarta.servlet.jsp.*;
import java.util.List;
import Beans.Categories;
import Beans.Products;

public final class addProduct_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent,
                 org.apache.jasper.runtime.JspSourceImports,
                 org.apache.jasper.runtime.JspSourceDirectives {

  private static final jakarta.servlet.jsp.JspFactory _jspxFactory =
          jakarta.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  private static final java.util.Set<java.lang.String> _jspx_imports_packages;

  private static final java.util.Set<java.lang.String> _jspx_imports_classes;

  static {
    _jspx_imports_packages = new java.util.HashSet<>();
    _jspx_imports_packages.add("jakarta.servlet");
    _jspx_imports_packages.add("jakarta.servlet.http");
    _jspx_imports_packages.add("jakarta.servlet.jsp");
    _jspx_imports_classes = new java.util.HashSet<>();
    _jspx_imports_classes.add("java.util.List");
    _jspx_imports_classes.add("Beans.Categories");
    _jspx_imports_classes.add("Beans.Products");
  }

  private volatile jakarta.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public java.util.Set<java.lang.String> getPackageImports() {
    return _jspx_imports_packages;
  }

  public java.util.Set<java.lang.String> getClassImports() {
    return _jspx_imports_classes;
  }

  public boolean getErrorOnELNotFound() {
    return false;
  }

  public jakarta.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
  }

  public void _jspDestroy() {
  }

  public void _jspService(final jakarta.servlet.http.HttpServletRequest request, final jakarta.servlet.http.HttpServletResponse response)
      throws java.io.IOException, jakarta.servlet.ServletException {

    if (!jakarta.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) {
      final java.lang.String _jspx_method = request.getMethod();
      if ("OPTIONS".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        return;
      }
      if (!"GET".equals(_jspx_method) && !"POST".equals(_jspx_method) && !"HEAD".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, "JSPs only permit GET, POST or HEAD. Jasper also permits OPTIONS");
        return;
      }
    }

    final jakarta.servlet.jsp.PageContext pageContext;
    jakarta.servlet.http.HttpSession session = null;
    final jakarta.servlet.ServletContext application;
    final jakarta.servlet.ServletConfig config;
    jakarta.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    jakarta.servlet.jsp.JspWriter _jspx_out = null;
    jakarta.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html; charset=UTF-8");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("<html lang=\"en\">\r\n");
      out.write("<head>\r\n");
      out.write("    <meta charset=\"UTF-8\">\r\n");
      out.write("    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\r\n");
      out.write("    <title>Thêm Sản Phẩm</title>\r\n");
      out.write("    <script src=\"https://cdn.tailwindcss.com\"></script>\r\n");
      out.write("    <link href=\"https://cdnjs.cloudflare.com/ajax/libs/font-awesome/5.15.3/css/all.min.css\" rel=\"stylesheet\"/>\r\n");
      out.write("    <link href=\"https://fonts.googleapis.com/css2?family=Roboto:wght@400;700&display=swap\" rel=\"stylesheet\"/>\r\n");
      out.write("    <style>\r\n");
      out.write("        body {\r\n");
      out.write("            font-family: 'Roboto', sans-serif;\r\n");
      out.write("        }\r\n");
      out.write("    </style>\r\n");
      out.write("</head>\r\n");
      out.write("<body class=\"bg-gray-100 flex items-center justify-center min-h-screen\">\r\n");
      out.write("    <div class=\"bg-white p-8 rounded-lg shadow-lg w-full max-w-4xl\">\r\n");
      out.write("        <h1 class=\"text-3xl font-bold mb-6\">Thêm Sản Phẩm</h1>\r\n");
      out.write("\r\n");
      out.write("        ");

            String status = request.getParameter("status");
            if (status != null) {
                String message = "";
                switch (status) {
                    case "login_required":
                        message = "Vui lòng đăng nhập để thực hiện hành động này.";
                        break;
                    case "missing_fields":
                        message = "Vui lòng điền đầy đủ các trường bắt buộc.";
                        break;
                    case "invalid_values":
                        message = "Giá hoặc số lượng tồn kho không được âm.";
                        break;
                    case "invalid_format":
                        message = "Dữ liệu nhập vào không đúng định dạng.";
                        break;
                    case "invalid_action":
                        message = "Hành động không hợp lệ.";
                        break;
                    case "error":
                        message = "Có lỗi xảy ra. Vui lòng thử lại.";
                        break;
                }
                if (!message.isEmpty()) {
        
      out.write("\r\n");
      out.write("        <div class=\"bg-red-600 text-white p-4 rounded-lg shadow-lg mb-6 flex items-center space-x-4\">\r\n");
      out.write("            <i class=\"fas fa-exclamation-circle text-xl\"></i>\r\n");
      out.write("            <span>");
      out.print( message );
      out.write("</span>\r\n");
      out.write("        </div>\r\n");
      out.write("        ");

                }
            }
        
      out.write("\r\n");
      out.write("\r\n");
      out.write("        <form class=\"flex flex-col md:flex-row\" action=\"Product\" method=\"post\" enctype=\"multipart/form-data\" onsubmit=\"return validateForm();\">\r\n");
      out.write("            <input type=\"hidden\" name=\"action\" value=\"add\">\r\n");
      out.write("            <input type=\"hidden\" name=\"csrfToken\" value=\"");
      out.print( session.getAttribute("csrfToken") );
      out.write("\"/>\r\n");
      out.write("            <div class=\"md:w-1/2 md:pr-4\">\r\n");
      out.write("                <div class=\"mb-4\">\r\n");
      out.write("                    <label class=\"block text-gray-700 mb-2\" for=\"product-name\">Tên Sản Phẩm</label>\r\n");
      out.write("                    <input type=\"text\" id=\"product-name\" name=\"name\" class=\"w-full p-2 border border-gray-300 rounded\" placeholder=\"Nhập tên sản phẩm\" required>\r\n");
      out.write("                </div>\r\n");
      out.write("                <div class=\"mb-4\">\r\n");
      out.write("                    <label class=\"block text-gray-700 mb-2\" for=\"product-description\">Mô Tả</label>\r\n");
      out.write("                    <textarea id=\"product-description\" name=\"description\" class=\"w-full p-2 border border-gray-300 rounded\" placeholder=\"Nhập mô tả sản phẩm\" required></textarea>\r\n");
      out.write("                </div>\r\n");
      out.write("                <div class=\"mb-4\">\r\n");
      out.write("                    <label class=\"block text-gray-700 mb-2\" for=\"product-price\">Giá</label>\r\n");
      out.write("                    <input type=\"number\" id=\"product-price\" name=\"price\" class=\"w-full p-2 border border-gray-300 rounded\" placeholder=\"Nhập giá\" required min=\"0\">\r\n");
      out.write("                </div>\r\n");
      out.write("                <div class=\"mb-4\">\r\n");
      out.write("                    <label class=\"block text-gray-700 mb-2\" for=\"product-size\">Kích Cỡ</label>\r\n");
      out.write("                    <input type=\"text\" id=\"product-size\" name=\"size\" class=\"w-full p-2 border border-gray-300 rounded\" placeholder=\"Nhập kích cỡ\" required>\r\n");
      out.write("                </div>\r\n");
      out.write("                <div class=\"mb-4\">\r\n");
      out.write("                    <label class=\"block text-gray-700 mb-2\" for=\"product-stock\">Số Lượng Tồn Kho</label>\r\n");
      out.write("                    <input type=\"number\" id=\"product-stock\" name=\"stock\" class=\"w-full p-2 border border-gray-300 rounded\" placeholder=\"Nhập số lượng tồn kho\" required min=\"0\">\r\n");
      out.write("                </div>\r\n");
      out.write("                <div class=\"mb-4\">\r\n");
      out.write("                    <label class=\"block text-gray-700 mb-2\" for=\"product-category\">Danh Mục</label>\r\n");
      out.write("                    <select id=\"product-category\" name=\"categoryId\" class=\"w-full p-2 border border-gray-300 rounded\" required>\r\n");
      out.write("                        <option value=\"\">Chọn Danh Mục</option>\r\n");
      out.write("                        ");

                            List<Categories> categoriesList = (List<Categories>) request.getAttribute("categoriesList");
                            if (categoriesList != null && !categoriesList.isEmpty()) {
                                for (Categories category : categoriesList) {
                        
      out.write("\r\n");
      out.write("                        <option value=\"");
      out.print( category.getCategoryId() );
      out.write('"');
      out.write('>');
      out.print( category.getCname() );
      out.write("</option>\r\n");
      out.write("                        ");

                                }
                            } else {
                        
      out.write("\r\n");
      out.write("                        <option value=\"\">Không có danh mục nào</option>\r\n");
      out.write("                        ");

                            }
                        
      out.write("\r\n");
      out.write("                    </select>\r\n");
      out.write("                </div>\r\n");
      out.write("                <div class=\"mb-4\">\r\n");
      out.write("                    <label class=\"block text-gray-700 mb-2\" for=\"product-status\">Trạng Thái</label>\r\n");
      out.write("                    <select id=\"product-status\" name=\"status\" class=\"w-full p-2 border border-gray-300 rounded\" required>\r\n");
      out.write("                        <option value=\"true\">Có sẵn</option>\r\n");
      out.write("                        <option value=\"false\">Hết hàng</option>\r\n");
      out.write("                    </select>\r\n");
      out.write("                </div>\r\n");
      out.write("                <button type=\"submit\" class=\"w-full bg-orange-500 text-white py-2 rounded\">Thêm Sản Phẩm</button>\r\n");
      out.write("                <button type=\"button\" class=\"w-full bg-gray-500 text-white py-2 rounded mt-2\" onclick=\"window.location.href='Product'\">Hủy</button>\r\n");
      out.write("            </div>\r\n");
      out.write("            <div class=\"md:w-1/2 md:pl-4 flex flex-col items-center\">\r\n");
      out.write("                <div class=\"mb-4 w-full\">\r\n");
      out.write("                    <label class=\"block text-gray-700 mb-2\" for=\"product-image\">Ảnh Sản Phẩm</label>\r\n");
      out.write("                    <div class=\"border-2 border-dashed border-gray-300 rounded-lg p-4 flex justify-center items-center\">\r\n");
      out.write("                        <input type=\"file\" id=\"product-image\" name=\"image\" class=\"w-full text-center\" required accept=\"image/*\">\r\n");
      out.write("                    </div>\r\n");
      out.write("                </div>\r\n");
      out.write("                <div class=\"w-full h-64 border border-gray-300 rounded-lg flex justify-center items-center\">\r\n");
      out.write("                    <img id=\"image-preview\" class=\"max-h-full max-w-full\" src=\"#\" alt=\"Image Preview\" style=\"display: none;\">\r\n");
      out.write("                </div>\r\n");
      out.write("            </div>\r\n");
      out.write("        </form>\r\n");
      out.write("        <br>\r\n");
      out.write("        <a href=\"Product\">Quay lại danh sách sản phẩm</a>\r\n");
      out.write("    </div>\r\n");
      out.write("\r\n");
      out.write("    <script>\r\n");
      out.write("        // Hiển thị preview ảnh\r\n");
      out.write("        document.getElementById('product-image').addEventListener('change', function(event) {\r\n");
      out.write("            const file = event.target.files[0];\r\n");
      out.write("            if (file) {\r\n");
      out.write("                const reader = new FileReader();\r\n");
      out.write("                reader.onload = function(e) {\r\n");
      out.write("                    const img = document.getElementById('image-preview');\r\n");
      out.write("                    img.src = e.target.result;\r\n");
      out.write("                    img.style.display = 'block';\r\n");
      out.write("                };\r\n");
      out.write("                reader.readAsDataURL(file);\r\n");
      out.write("            } else {\r\n");
      out.write("                document.getElementById('image-preview').style.display = 'none';\r\n");
      out.write("            }\r\n");
      out.write("        });\r\n");
      out.write("\r\n");
      out.write("        // Kiểm tra dữ liệu trước khi gửi form\r\n");
      out.write("        function validateForm() {\r\n");
      out.write("            const name = document.getElementById('product-name').value.trim();\r\n");
      out.write("            const description = document.getElementById('product-description').value.trim();\r\n");
      out.write("            const price = parseFloat(document.getElementById('product-price').value);\r\n");
      out.write("            const stock = parseInt(document.getElementById('product-stock').value);\r\n");
      out.write("            const category = document.getElementById('product-category').value;\r\n");
      out.write("\r\n");
      out.write("            if (!name || !description || !category) {\r\n");
      out.write("                alert(\"Vui lòng điền đầy đủ các trường bắt buộc!\");\r\n");
      out.write("                return false;\r\n");
      out.write("            }\r\n");
      out.write("            if (isNaN(price) || price < 0) {\r\n");
      out.write("                alert(\"Giá sản phẩm phải là số không âm!\");\r\n");
      out.write("                return false;\r\n");
      out.write("            }\r\n");
      out.write("            if (isNaN(stock) || stock < 0) {\r\n");
      out.write("                alert(\"Số lượng tồn kho phải là số không âm!\");\r\n");
      out.write("                return false;\r\n");
      out.write("            }\r\n");
      out.write("            return true;\r\n");
      out.write("        }\r\n");
      out.write("    </script>\r\n");
      out.write("</body>\r\n");
      out.write("</html>");
    } catch (java.lang.Throwable t) {
      if (!(t instanceof jakarta.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
