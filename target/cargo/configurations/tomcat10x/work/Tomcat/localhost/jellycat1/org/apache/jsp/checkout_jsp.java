/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/10.1.10
 * Generated at: 2025-05-13 09:36:18 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp;

import jakarta.servlet.*;
import jakarta.servlet.http.*;
import jakarta.servlet.jsp.*;
import Beans.Cart;
import Beans.CartItem;
import Beans.Products;
import java.util.Map;
import java.util.List;
import Beans.Users;
import Utils.DBOrder;
import Beans.SQLServerConnection;
import java.sql.Connection;

public final class checkout_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent,
                 org.apache.jasper.runtime.JspSourceImports,
                 org.apache.jasper.runtime.JspSourceDirectives {

  private static final jakarta.servlet.jsp.JspFactory _jspxFactory =
          jakarta.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  private static final java.util.Set<java.lang.String> _jspx_imports_packages;

  private static final java.util.Set<java.lang.String> _jspx_imports_classes;

  static {
    _jspx_imports_packages = new java.util.HashSet<>();
    _jspx_imports_packages.add("jakarta.servlet");
    _jspx_imports_packages.add("jakarta.servlet.http");
    _jspx_imports_packages.add("jakarta.servlet.jsp");
    _jspx_imports_classes = new java.util.HashSet<>();
    _jspx_imports_classes.add("Utils.DBOrder");
    _jspx_imports_classes.add("java.util.List");
    _jspx_imports_classes.add("Beans.Users");
    _jspx_imports_classes.add("java.sql.Connection");
    _jspx_imports_classes.add("java.util.Map");
    _jspx_imports_classes.add("Beans.Cart");
    _jspx_imports_classes.add("Beans.CartItem");
    _jspx_imports_classes.add("Beans.Products");
    _jspx_imports_classes.add("Beans.SQLServerConnection");
  }

  private volatile jakarta.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public java.util.Set<java.lang.String> getPackageImports() {
    return _jspx_imports_packages;
  }

  public java.util.Set<java.lang.String> getClassImports() {
    return _jspx_imports_classes;
  }

  public boolean getErrorOnELNotFound() {
    return false;
  }

  public jakarta.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
  }

  public void _jspDestroy() {
  }

  public void _jspService(final jakarta.servlet.http.HttpServletRequest request, final jakarta.servlet.http.HttpServletResponse response)
      throws java.io.IOException, jakarta.servlet.ServletException {

    if (!jakarta.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) {
      final java.lang.String _jspx_method = request.getMethod();
      if ("OPTIONS".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        return;
      }
      if (!"GET".equals(_jspx_method) && !"POST".equals(_jspx_method) && !"HEAD".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, "JSPs only permit GET, POST or HEAD. Jasper also permits OPTIONS");
        return;
      }
    }

    final jakarta.servlet.jsp.PageContext pageContext;
    jakarta.servlet.http.HttpSession session = null;
    final jakarta.servlet.ServletContext application;
    final jakarta.servlet.ServletConfig config;
    jakarta.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    jakarta.servlet.jsp.JspWriter _jspx_out = null;
    jakarta.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html; charset=UTF-8");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("<!DOCTYPE html>\r\n");
      out.write("<html lang=\"en\">\r\n");
      out.write("<head>\r\n");
      out.write("    <meta charset=\"UTF-8\">\r\n");
      out.write("    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\r\n");
      out.write("    <title>Checkout</title>\r\n");
      out.write("    <link rel=\"stylesheet\" href=\"https://cdn.jsdelivr.net/npm/tailwindcss@1.9.6/dist/tailwind.min.css\">\r\n");
      out.write("</head>\r\n");
      out.write("<body class=\"bg-gray-100\">\r\n");
      out.write("\r\n");
      out.write("    <header class=\"bg-white shadow-lg\">\r\n");
      out.write("        <div class=\"container mx-auto flex justify-between items-center py-4 px-6\">\r\n");
      out.write("            <div class=\"logo flex items-center\">\r\n");
      out.write("                <img alt=\"Logo\" class=\"mr-4\" height=\"50\" src=\"https://storage.googleapis.com/a1aa/image/FQHw3eMxpk2eakMv3O1MJ3DrSguzwJk8FAGfLnYFr6mlCFlnA.jpg\" width=\"50\">\r\n");
      out.write("                <span class=\"text-2xl font-bold text-blue-500\">JELLYCAT</span>\r\n");
      out.write("            </div>\r\n");
      out.write("            <div class=\"flex items-center space-x-6\">\r\n");
      out.write("                <a href=\"ProductList\" class=\"text-gray-600 hover:text-blue-500\">Home</a>\r\n");
      out.write("                <a href=\"Cart\" class=\"text-gray-600 hover:text-blue-500\">Cart</a>\r\n");
      out.write("            </div>\r\n");
      out.write("        </div>\r\n");
      out.write("    </header>\r\n");
      out.write("\r\n");
      out.write("    <div class=\"container mx-auto py-8\">\r\n");
      out.write("        <h1 class=\"text-3xl font-bold mb-4\">Đặt hàng</h1>\r\n");
 
            // Lấy thông báo lỗi từ session và hiển thị nếu có
            String errorMessage = (String) session.getAttribute("error");
            if (errorMessage != null) {
        
      out.write("\r\n");
      out.write("        <div class=\"alert alert-danger text-red-500\">\r\n");
      out.write("            ");
      out.print( errorMessage );
      out.write("\r\n");
      out.write("        </div>\r\n");
      out.write("        ");
 
            session.removeAttribute("error"); 
            }
        
      out.write("\r\n");
      out.write("        ");
 
            // Lấy giỏ hàng từ session
            Beans.Cart cart = (Beans.Cart) session.getAttribute("cart");
            if (cart != null && !cart.isEmpty()) {
        
      out.write("\r\n");
      out.write("\r\n");
      out.write("        <!-- Giỏ hàng -->\r\n");
      out.write("        <h2 class=\"text-2xl font-semibold mb-4\">Sản phẩm</h2>\r\n");
      out.write("        <table class=\"min-w-full bg-white border border-gray-300 mb-6\">\r\n");
      out.write("            <thead>\r\n");
      out.write("                <tr>\r\n");
      out.write("                    <th class=\"py-2 px-4 border-b\">Tên sản phẩm</th>\r\n");
      out.write("                    <th class=\"py-2 px-4 border-b\">Giá</th>\r\n");
      out.write("                    <th class=\"py-2 px-4 border-b\">số lượng</th>\r\n");
      out.write("                    <th class=\"py-2 px-4 border-b\">Tổng</th>\r\n");
      out.write("                </tr>\r\n");
      out.write("            </thead>\r\n");
      out.write("            <tbody>\r\n");
      out.write("                ");
 
                    // Hiển thị từng sản phẩm trong giỏ hàng
                    for (Map.Entry<Integer, CartItem> entry : cart.getItems().entrySet()) {
                        Integer productId = entry.getKey();
                        CartItem item = entry.getValue();
                        Products product = item.getProduct();
                
      out.write("\r\n");
      out.write("                <tr>\r\n");
      out.write("                    <td class=\"py-2 px-4 border-b\">");
      out.print( product.getName() );
      out.write("</td>\r\n");
      out.write("                    <td class=\"py-2 px-4 border-b\">");
      out.print( product.getPrice() );
      out.write(" VND</td>\r\n");
      out.write("                    <td class=\"py-2 px-4 border-b\">");
      out.print( item.getQuantity() );
      out.write("</td>\r\n");
      out.write("                    <td class=\"py-2 px-4 border-b\">");
      out.print( item.getTotal() );
      out.write(" VND</td>\r\n");
      out.write("                </tr>\r\n");
      out.write("                ");
 
                    }
                
      out.write("\r\n");
      out.write("            </tbody>\r\n");
      out.write("        </table>\r\n");
      out.write("\r\n");
      out.write("        <div class=\"mt-4\">\r\n");
      out.write("            <h2 class=\"text-xl font-bold\">Tổng: ");
      out.print( cart.getTotalPrice() );
      out.write(" VND</h2>\r\n");
      out.write("        </div>\r\n");
      out.write("\r\n");
      out.write("        <!-- Form thông tin giao hàng và thanh toán -->\r\n");
      out.write("        <h2 class=\"text-2xl font-semibold mt-8 mb-4\">Địa chỉ giao hàng</h2>\r\n");
      out.write("        <form action=\"");
      out.print( request.getContextPath() );
      out.write("/PayOrder\" method=\"post\">\r\n");
      out.write("\r\n");
      out.write("         <input type=\"hidden\" name=\"action\" value=\"submit\" />\r\n");
      out.write("            <div class=\"mb-4\">\r\n");
      out.write("                <label for=\"shippingAddress\" class=\"block text-sm font-semibold\">Địa chỉ</label>\r\n");
      out.write("                <input type=\"text\" id=\"shippingAddress\" name=\"shippingAddress\" required class=\"w-full p-2 border border-gray-300 rounded mt-2\" />\r\n");
      out.write("            </div>\r\n");
      out.write("\r\n");
      out.write("            <div class=\"mt-6\">\r\n");
      out.write("                <button type=\"submit\" class=\"bg-blue-500 text-white px-6 py-3 rounded\">Đặt hàng</button>\r\n");
      out.write("            </div>\r\n");
      out.write("        </form>\r\n");
      out.write("        ");
 
            } else {
        
      out.write("\r\n");
      out.write("        <div class=\"text-center text-red-500\">\r\n");
      out.write("            <p>Giỏ hàng của bạn trống!</p>\r\n");
      out.write("        </div>\r\n");
      out.write("        ");
 
            }
        
      out.write("\r\n");
      out.write("    </div>\r\n");
      out.write("</body>\r\n");
      out.write("</html>\r\n");
    } catch (java.lang.Throwable t) {
      if (!(t instanceof jakarta.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
